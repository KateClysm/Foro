Temas:
    -Comandos
    -Middleware
    -Cors
    -Body Parser


----------------------------------------------------------------------------------------------------------------------------------------
-Comandos-

(dentro del directorio: PS C:\Users\Laptop\Desktop\Proyectos\Foro\para-back>)
npx tsc --watch : transpilación constante.
node dist/index.js : activación del servidor.

**si bien se puede usar la transpilación constante, si se hacen cambios es necesario re-abrir el servidor con Ctrl+C y luego el comando necesario.


----------------------------------------------------------------------------------------------------------------------------------------
-Middleware-
¿Qué es un Middleware?

Un middleware es una función o conjunto de funciones que se ejecutan en el medio del proceso de manejo de una solicitud en una aplicación web. En el contexto de las aplicaciones de servidor, como las aplicaciones Node.js y Express, los middlewares se utilizan para realizar tareas específicas en el procesamiento de solicitudes HTTP antes de que lleguen a su destino final o después de que se haya completado la respuesta.

Los middlewares son componentes clave en muchas arquitecturas de aplicaciones web modernas porque permiten dividir la lógica de manejo de solicitudes en segmentos más pequeños y reutilizables. Esto ayuda a mantener el código más organizado, legible y mantenible, además de facilitar la adición o modificación de funcionalidades a lo largo del flujo de solicitud-respuesta.

En el contexto de Express, los middlewares son funciones que tienen acceso a los objetos request (solicitud) y response (respuesta), y la función next que permite pasar el control al siguiente middleware en la cadena. Los middlewares pueden realizar diversas tareas, como:

1)Manipulación de la solicitud: Pueden modificar o agregar datos a la solicitud antes de que llegue al controlador final.

2)Validación de datos: Pueden verificar que los datos enviados en la solicitud sean válidos y cumplen ciertos criterios antes de permitir que continúe el proceso.

3)Autenticación y autorización: Pueden verificar la identidad del usuario y si tiene permisos para acceder a ciertos recursos.

4)Manejo de errores: Pueden capturar y manejar errores que ocurran durante el procesamiento de la solicitud.

5)Logging y seguimiento: Pueden registrar información sobre las solicitudes y respuestas para fines de auditoría o depuración.

6)Compresión y encriptación: Pueden comprimir o encriptar los datos antes de enviarlos como respuesta al cliente.

Aquí hay un ejemplo simple de cómo se ve un middleware en Express:

const express = require('express');
const app = express();

// Ejemplo de middleware
app.use((req, res, next) => {
  console.log('Middleware ejecutado');
  next(); // Llama al siguiente middleware en la cadena
});

app.get('/', (req, res) => {
  res.send('Respuesta desde el controlador');
});

app.listen(3000, () => {
  console.log('Servidor en funcionamiento en el puerto 3000');
});

En este ejemplo, el middleware se ejecutará cada vez que se reciba una solicitud en cualquier ruta. Puedes imaginar el middleware como una puerta de entrada que inspecciona y modifica las solicitudes antes de permitir que lleguen a sus destinos finales (los controladores en este caso).

En resumen, los middlewares son herramientas poderosas para personalizar y gestionar el flujo de solicitudes y respuestas en una aplicación web, lo que facilita la implementación de funcionalidades específicas y la mejora de la modularidad y el mantenimiento del código.


----------------------------------------------------------------------------------------------------------------------------------------
-Cors-
¿Por qué activamos Cors en el back?

CORS (Cross-Origin Resource Sharing):
Cuando tienes una aplicación frontend y una aplicación backend que se ejecutan en diferentes dominios (por ejemplo, una en http://localhost:3000 y otra en http://localhost:3001), el navegador web implementa una política de seguridad llamada Same-Origin Policy, que impide que las solicitudes AJAX (peticiones entre dominios) se realicen de manera predeterminada.

El middleware CORS (que significa Cross-Origin Resource Sharing) se utiliza para habilitar el intercambio de recursos entre diferentes dominios en un entorno controlado. Cuando habilitas CORS en tu servidor backend, le estás permitiendo al frontend hacer peticiones al backend, incluso si están en diferentes dominios.


----------------------------------------------------------------------------------------------------------------------------------------
-Body Parser-
¿Por qué activamos Body Parser en el back?

Cuando envías datos desde el frontend al backend, estos datos se transmiten en el cuerpo (body) de la solicitud HTTP. El cuerpo puede contener diferentes tipos de datos, como JSON, formularios, archivos, etc.

El middleware Body Parser se utiliza para analizar el cuerpo de las solicitudes entrantes y extraer los datos de manera que puedan ser utilizados por el servidor en un formato comprensible. En el caso de Express, por defecto, no es capaz de interpretar automáticamente el cuerpo de una solicitud JSON. Body Parser agrega esta funcionalidad al permitir que Express interprete y extraiga los datos del cuerpo de la solicitud, transformándolos en un objeto que el servidor puede manejar.

En tu servidor Express, usas el middleware body-parser para interpretar y extraer automáticamente el cuerpo de las solicitudes entrantes en formato JSON. Esto te permite acceder a los datos que el frontend envía en las peticiones POST o PUT, por ejemplo.


----------------------------------------------------------------------------------------------------------------------------------------
